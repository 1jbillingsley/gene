"""Data models for the gene API."""

from __future__ import annotations

from typing import Any

from pydantic import BaseModel, Field


class Message(BaseModel):
    """Generic message payload.

    This model provides the core fields shared by all messages processed by
    the API. It can be extended or subclassed to support additional
    message types as the system grows.
    """

    body: str = Field(
        ..., description="Main textual content of the message to interpret."
    )
    metadata: dict[str, Any] | None = Field(
        default=None,
        description=(
            "Optional dictionary with context about the message, such as "
            "environment details or source identifiers. This allows external "
            "integrations to supply information that may influence processing "
            "logic."
        ),
    )


class ActionResult(BaseModel):
    """Result of processing a :class:`Message`."""

    reply: str = Field(..., description="Textual response generated by the agent.")
    metadata: dict[str, Any] | None = Field(
        default=None,
        description=(
            "Optional information describing how the response was produced, "
            "such as model identifiers or processing metadata."
        ),
    )


class ErrorResponse(BaseModel):
    """Standardized error response format."""

    error: str = Field(..., description="Human-readable error message")
    error_type: str = Field(..., description="Machine-readable error type identifier")
    retry_after: int | None = Field(
        default=None,
        description="Seconds to wait before retrying (for rate limit errors)",
    )
    agent_id: str | None = Field(
        default=None,
        description="Agent identifier when error originates from Agents SDK",
    )
    details: str | None = Field(
        default=None, description="Additional technical details about the error"
    )
